// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: feeds.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const createFeed = `-- name: CreateFeed :one
INSERT INTO feeds (id, name, url, user_id)
VALUES (
    $1,
    $2,
    $3,
    $4
)
RETURNING id, name, url, user_id
`

type CreateFeedParams struct {
	ID     uuid.UUID
	Name   string
	Url    string
	UserID uuid.UUID
}

func (q *Queries) CreateFeed(ctx context.Context, arg CreateFeedParams) (Feed, error) {
	row := q.db.QueryRowContext(ctx, createFeed,
		arg.ID,
		arg.Name,
		arg.Url,
		arg.UserID,
	)
	var i Feed
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Url,
		&i.UserID,
	)
	return i, err
}

const getFeedByURL = `-- name: GetFeedByURL :one
SELECT id, name, url, user_id from feeds
WHERE url = $1
`

func (q *Queries) GetFeedByURL(ctx context.Context, url string) (Feed, error) {
	row := q.db.QueryRowContext(ctx, getFeedByURL, url)
	var i Feed
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Url,
		&i.UserID,
	)
	return i, err
}

const listFeedsWithUsers = `-- name: ListFeedsWithUsers :many
SELECT
    feeds.name AS feed_name,
    users.name AS user_name FROM feeds
INNER JOIN users
ON feeds.user_id = users.id
`

type ListFeedsWithUsersRow struct {
	FeedName string
	UserName string
}

func (q *Queries) ListFeedsWithUsers(ctx context.Context) ([]ListFeedsWithUsersRow, error) {
	rows, err := q.db.QueryContext(ctx, listFeedsWithUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListFeedsWithUsersRow
	for rows.Next() {
		var i ListFeedsWithUsersRow
		if err := rows.Scan(&i.FeedName, &i.UserName); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
